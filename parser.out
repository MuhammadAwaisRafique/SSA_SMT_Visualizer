Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement
Rule 3     statements -> statement statements
Rule 4     statement -> var_declaration
Rule 5     statement -> assignment
Rule 6     statement -> while_loop
Rule 7     statement -> for_loop
Rule 8     statement -> if_statement
Rule 9     statement -> assert_statement
Rule 10    var_declaration -> VAR IDENTIFIER ASSIGN expression SEMICOLON
Rule 11    var_declaration -> VAR IDENTIFIER COLON_EQ expression SEMICOLON
Rule 12    assignment -> IDENTIFIER ASSIGN expression SEMICOLON
Rule 13    assignment -> IDENTIFIER COLON_EQ expression SEMICOLON
Rule 14    while_loop -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE
Rule 15    for_loop -> FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
Rule 16    for_loop -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
Rule 17    if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE
Rule 18    if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
Rule 19    assert_statement -> ASSERT expression SEMICOLON
Rule 20    expression -> term
Rule 21    expression -> expression PLUS term
Rule 22    expression -> expression MINUS term
Rule 23    term -> factor
Rule 24    term -> term TIMES factor
Rule 25    term -> term DIVIDE factor
Rule 26    term -> term MOD factor
Rule 27    factor -> primary
Rule 28    factor -> NOT primary
Rule 29    factor -> MINUS primary
Rule 30    comparison -> comparison EQ atomic
Rule 31    comparison -> comparison NE atomic
Rule 32    comparison -> comparison LT atomic
Rule 33    comparison -> comparison GT atomic
Rule 34    comparison -> comparison LE atomic
Rule 35    comparison -> comparison GE atomic
Rule 36    comparison -> comparison AND atomic
Rule 37    comparison -> comparison OR atomic
Rule 38    comparison -> atomic
Rule 39    primary -> comparison
Rule 40    atomic -> IDENTIFIER
Rule 41    atomic -> NUMBER
Rule 42    atomic -> LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 36
ASSERT               : 19
ASSIGN               : 10 12
COLON_EQ             : 11 13
DIVIDE               : 25
ELSE                 : 18
EQ                   : 30
FOR                  : 15 16
GE                   : 35
GT                   : 33
IDENTIFIER           : 10 11 12 13 40
IF                   : 17 18
LBRACE               : 14 15 16 17 18 18
LE                   : 34
LPAREN               : 14 15 16 17 18 42
LT                   : 32
MINUS                : 22 29
MOD                  : 26
NE                   : 31
NOT                  : 28
NUMBER               : 41
OR                   : 37
PLUS                 : 21
RBRACE               : 14 15 16 17 18 18
RPAREN               : 14 15 16 17 18 42
SEMICOLON            : 10 11 12 13 15 16 19
TIMES                : 24
VAR                  : 10 11
WHILE                : 14
error                : 

Nonterminals, with rules where they appear

assert_statement     : 9
assignment           : 5 15 16 16
atomic               : 30 31 32 33 34 35 36 37 38
comparison           : 30 31 32 33 34 35 36 37 39
expression           : 10 11 12 13 14 15 16 17 18 19 21 22 42
factor               : 23 24 25 26
for_loop             : 7
if_statement         : 8
primary              : 27 28 29
program              : 0
statement            : 2 3
statements           : 1 3 14 15 16 17 18 18
term                 : 20 21 22 24 25 26
var_declaration      : 4 15
while_loop           : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . var_declaration
    (5) statement -> . assignment
    (6) statement -> . while_loop
    (7) statement -> . for_loop
    (8) statement -> . if_statement
    (9) statement -> . assert_statement
    (10) var_declaration -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (11) var_declaration -> . VAR IDENTIFIER COLON_EQ expression SEMICOLON
    (12) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) assignment -> . IDENTIFIER COLON_EQ expression SEMICOLON
    (14) while_loop -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (15) for_loop -> . FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (16) for_loop -> . FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (18) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (19) assert_statement -> . ASSERT expression SEMICOLON

    VAR             shift and go to state 10
    IDENTIFIER      shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    ASSERT          shift and go to state 15

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    var_declaration                shift and go to state 4
    assignment                     shift and go to state 5
    while_loop                     shift and go to state 6
    for_loop                       shift and go to state 7
    if_statement                   shift and go to state 8
    assert_statement               shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .

    $end            reduce using rule 1 (program -> statements .)


state 3

    (2) statements -> statement .
    (3) statements -> statement . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . var_declaration
    (5) statement -> . assignment
    (6) statement -> . while_loop
    (7) statement -> . for_loop
    (8) statement -> . if_statement
    (9) statement -> . assert_statement
    (10) var_declaration -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (11) var_declaration -> . VAR IDENTIFIER COLON_EQ expression SEMICOLON
    (12) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) assignment -> . IDENTIFIER COLON_EQ expression SEMICOLON
    (14) while_loop -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (15) for_loop -> . FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (16) for_loop -> . FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (18) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (19) assert_statement -> . ASSERT expression SEMICOLON

    $end            reduce using rule 2 (statements -> statement .)
    RBRACE          reduce using rule 2 (statements -> statement .)
    VAR             shift and go to state 10
    IDENTIFIER      shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    ASSERT          shift and go to state 15

    statement                      shift and go to state 3
    statements                     shift and go to state 16
    var_declaration                shift and go to state 4
    assignment                     shift and go to state 5
    while_loop                     shift and go to state 6
    for_loop                       shift and go to state 7
    if_statement                   shift and go to state 8
    assert_statement               shift and go to state 9

state 4

    (4) statement -> var_declaration .

    VAR             reduce using rule 4 (statement -> var_declaration .)
    IDENTIFIER      reduce using rule 4 (statement -> var_declaration .)
    WHILE           reduce using rule 4 (statement -> var_declaration .)
    FOR             reduce using rule 4 (statement -> var_declaration .)
    IF              reduce using rule 4 (statement -> var_declaration .)
    ASSERT          reduce using rule 4 (statement -> var_declaration .)
    $end            reduce using rule 4 (statement -> var_declaration .)
    RBRACE          reduce using rule 4 (statement -> var_declaration .)


state 5

    (5) statement -> assignment .

    VAR             reduce using rule 5 (statement -> assignment .)
    IDENTIFIER      reduce using rule 5 (statement -> assignment .)
    WHILE           reduce using rule 5 (statement -> assignment .)
    FOR             reduce using rule 5 (statement -> assignment .)
    IF              reduce using rule 5 (statement -> assignment .)
    ASSERT          reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    RBRACE          reduce using rule 5 (statement -> assignment .)


state 6

    (6) statement -> while_loop .

    VAR             reduce using rule 6 (statement -> while_loop .)
    IDENTIFIER      reduce using rule 6 (statement -> while_loop .)
    WHILE           reduce using rule 6 (statement -> while_loop .)
    FOR             reduce using rule 6 (statement -> while_loop .)
    IF              reduce using rule 6 (statement -> while_loop .)
    ASSERT          reduce using rule 6 (statement -> while_loop .)
    $end            reduce using rule 6 (statement -> while_loop .)
    RBRACE          reduce using rule 6 (statement -> while_loop .)


state 7

    (7) statement -> for_loop .

    VAR             reduce using rule 7 (statement -> for_loop .)
    IDENTIFIER      reduce using rule 7 (statement -> for_loop .)
    WHILE           reduce using rule 7 (statement -> for_loop .)
    FOR             reduce using rule 7 (statement -> for_loop .)
    IF              reduce using rule 7 (statement -> for_loop .)
    ASSERT          reduce using rule 7 (statement -> for_loop .)
    $end            reduce using rule 7 (statement -> for_loop .)
    RBRACE          reduce using rule 7 (statement -> for_loop .)


state 8

    (8) statement -> if_statement .

    VAR             reduce using rule 8 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 8 (statement -> if_statement .)
    WHILE           reduce using rule 8 (statement -> if_statement .)
    FOR             reduce using rule 8 (statement -> if_statement .)
    IF              reduce using rule 8 (statement -> if_statement .)
    ASSERT          reduce using rule 8 (statement -> if_statement .)
    $end            reduce using rule 8 (statement -> if_statement .)
    RBRACE          reduce using rule 8 (statement -> if_statement .)


state 9

    (9) statement -> assert_statement .

    VAR             reduce using rule 9 (statement -> assert_statement .)
    IDENTIFIER      reduce using rule 9 (statement -> assert_statement .)
    WHILE           reduce using rule 9 (statement -> assert_statement .)
    FOR             reduce using rule 9 (statement -> assert_statement .)
    IF              reduce using rule 9 (statement -> assert_statement .)
    ASSERT          reduce using rule 9 (statement -> assert_statement .)
    $end            reduce using rule 9 (statement -> assert_statement .)
    RBRACE          reduce using rule 9 (statement -> assert_statement .)


state 10

    (10) var_declaration -> VAR . IDENTIFIER ASSIGN expression SEMICOLON
    (11) var_declaration -> VAR . IDENTIFIER COLON_EQ expression SEMICOLON

    IDENTIFIER      shift and go to state 17


state 11

    (12) assignment -> IDENTIFIER . ASSIGN expression SEMICOLON
    (13) assignment -> IDENTIFIER . COLON_EQ expression SEMICOLON

    ASSIGN          shift and go to state 18
    COLON_EQ        shift and go to state 19


state 12

    (14) while_loop -> WHILE . LPAREN expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 20


state 13

    (15) for_loop -> FOR . LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (16) for_loop -> FOR . LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 21


state 14

    (17) if_statement -> IF . LPAREN expression RPAREN LBRACE statements RBRACE
    (18) if_statement -> IF . LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    LPAREN          shift and go to state 22


state 15

    (19) assert_statement -> ASSERT . expression SEMICOLON
    (20) expression -> . term
    (21) expression -> . expression PLUS term
    (22) expression -> . expression MINUS term
    (23) term -> . factor
    (24) term -> . term TIMES factor
    (25) term -> . term DIVIDE factor
    (26) term -> . term MOD factor
    (27) factor -> . primary
    (28) factor -> . NOT primary
    (29) factor -> . MINUS primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    NOT             shift and go to state 28
    MINUS           shift and go to state 25
    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 23
    term                           shift and go to state 24
    factor                         shift and go to state 26
    primary                        shift and go to state 27
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 16

    (3) statements -> statement statements .

    $end            reduce using rule 3 (statements -> statement statements .)
    RBRACE          reduce using rule 3 (statements -> statement statements .)


state 17

    (10) var_declaration -> VAR IDENTIFIER . ASSIGN expression SEMICOLON
    (11) var_declaration -> VAR IDENTIFIER . COLON_EQ expression SEMICOLON

    ASSIGN          shift and go to state 34
    COLON_EQ        shift and go to state 35


state 18

    (12) assignment -> IDENTIFIER ASSIGN . expression SEMICOLON
    (20) expression -> . term
    (21) expression -> . expression PLUS term
    (22) expression -> . expression MINUS term
    (23) term -> . factor
    (24) term -> . term TIMES factor
    (25) term -> . term DIVIDE factor
    (26) term -> . term MOD factor
    (27) factor -> . primary
    (28) factor -> . NOT primary
    (29) factor -> . MINUS primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    NOT             shift and go to state 28
    MINUS           shift and go to state 25
    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 36
    term                           shift and go to state 24
    factor                         shift and go to state 26
    primary                        shift and go to state 27
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 19

    (13) assignment -> IDENTIFIER COLON_EQ . expression SEMICOLON
    (20) expression -> . term
    (21) expression -> . expression PLUS term
    (22) expression -> . expression MINUS term
    (23) term -> . factor
    (24) term -> . term TIMES factor
    (25) term -> . term DIVIDE factor
    (26) term -> . term MOD factor
    (27) factor -> . primary
    (28) factor -> . NOT primary
    (29) factor -> . MINUS primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    NOT             shift and go to state 28
    MINUS           shift and go to state 25
    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 37
    term                           shift and go to state 24
    factor                         shift and go to state 26
    primary                        shift and go to state 27
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 20

    (14) while_loop -> WHILE LPAREN . expression RPAREN LBRACE statements RBRACE
    (20) expression -> . term
    (21) expression -> . expression PLUS term
    (22) expression -> . expression MINUS term
    (23) term -> . factor
    (24) term -> . term TIMES factor
    (25) term -> . term DIVIDE factor
    (26) term -> . term MOD factor
    (27) factor -> . primary
    (28) factor -> . NOT primary
    (29) factor -> . MINUS primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    NOT             shift and go to state 28
    MINUS           shift and go to state 25
    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 38
    term                           shift and go to state 24
    factor                         shift and go to state 26
    primary                        shift and go to state 27
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 21

    (15) for_loop -> FOR LPAREN . var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (16) for_loop -> FOR LPAREN . assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (10) var_declaration -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (11) var_declaration -> . VAR IDENTIFIER COLON_EQ expression SEMICOLON
    (12) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) assignment -> . IDENTIFIER COLON_EQ expression SEMICOLON

    VAR             shift and go to state 10
    IDENTIFIER      shift and go to state 11

    var_declaration                shift and go to state 39
    assignment                     shift and go to state 40

state 22

    (17) if_statement -> IF LPAREN . expression RPAREN LBRACE statements RBRACE
    (18) if_statement -> IF LPAREN . expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (20) expression -> . term
    (21) expression -> . expression PLUS term
    (22) expression -> . expression MINUS term
    (23) term -> . factor
    (24) term -> . term TIMES factor
    (25) term -> . term DIVIDE factor
    (26) term -> . term MOD factor
    (27) factor -> . primary
    (28) factor -> . NOT primary
    (29) factor -> . MINUS primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    NOT             shift and go to state 28
    MINUS           shift and go to state 25
    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 41
    term                           shift and go to state 24
    factor                         shift and go to state 26
    primary                        shift and go to state 27
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 23

    (19) assert_statement -> ASSERT expression . SEMICOLON
    (21) expression -> expression . PLUS term
    (22) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 24

    (20) expression -> term .
    (24) term -> term . TIMES factor
    (25) term -> term . DIVIDE factor
    (26) term -> term . MOD factor

    SEMICOLON       reduce using rule 20 (expression -> term .)
    PLUS            reduce using rule 20 (expression -> term .)
    MINUS           reduce using rule 20 (expression -> term .)
    RPAREN          reduce using rule 20 (expression -> term .)
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47


state 25

    (29) factor -> MINUS . primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    primary                        shift and go to state 48
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 26

    (23) term -> factor .

    TIMES           reduce using rule 23 (term -> factor .)
    DIVIDE          reduce using rule 23 (term -> factor .)
    MOD             reduce using rule 23 (term -> factor .)
    SEMICOLON       reduce using rule 23 (term -> factor .)
    PLUS            reduce using rule 23 (term -> factor .)
    MINUS           reduce using rule 23 (term -> factor .)
    RPAREN          reduce using rule 23 (term -> factor .)


state 27

    (27) factor -> primary .

    TIMES           reduce using rule 27 (factor -> primary .)
    DIVIDE          reduce using rule 27 (factor -> primary .)
    MOD             reduce using rule 27 (factor -> primary .)
    SEMICOLON       reduce using rule 27 (factor -> primary .)
    PLUS            reduce using rule 27 (factor -> primary .)
    MINUS           reduce using rule 27 (factor -> primary .)
    RPAREN          reduce using rule 27 (factor -> primary .)


state 28

    (28) factor -> NOT . primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    primary                        shift and go to state 49
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 29

    (39) primary -> comparison .
    (30) comparison -> comparison . EQ atomic
    (31) comparison -> comparison . NE atomic
    (32) comparison -> comparison . LT atomic
    (33) comparison -> comparison . GT atomic
    (34) comparison -> comparison . LE atomic
    (35) comparison -> comparison . GE atomic
    (36) comparison -> comparison . AND atomic
    (37) comparison -> comparison . OR atomic

    TIMES           reduce using rule 39 (primary -> comparison .)
    DIVIDE          reduce using rule 39 (primary -> comparison .)
    MOD             reduce using rule 39 (primary -> comparison .)
    SEMICOLON       reduce using rule 39 (primary -> comparison .)
    PLUS            reduce using rule 39 (primary -> comparison .)
    MINUS           reduce using rule 39 (primary -> comparison .)
    RPAREN          reduce using rule 39 (primary -> comparison .)
    EQ              shift and go to state 50
    NE              shift and go to state 51
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57


state 30

    (38) comparison -> atomic .

    EQ              reduce using rule 38 (comparison -> atomic .)
    NE              reduce using rule 38 (comparison -> atomic .)
    LT              reduce using rule 38 (comparison -> atomic .)
    GT              reduce using rule 38 (comparison -> atomic .)
    LE              reduce using rule 38 (comparison -> atomic .)
    GE              reduce using rule 38 (comparison -> atomic .)
    AND             reduce using rule 38 (comparison -> atomic .)
    OR              reduce using rule 38 (comparison -> atomic .)
    TIMES           reduce using rule 38 (comparison -> atomic .)
    DIVIDE          reduce using rule 38 (comparison -> atomic .)
    MOD             reduce using rule 38 (comparison -> atomic .)
    SEMICOLON       reduce using rule 38 (comparison -> atomic .)
    PLUS            reduce using rule 38 (comparison -> atomic .)
    MINUS           reduce using rule 38 (comparison -> atomic .)
    RPAREN          reduce using rule 38 (comparison -> atomic .)


state 31

    (40) atomic -> IDENTIFIER .

    EQ              reduce using rule 40 (atomic -> IDENTIFIER .)
    NE              reduce using rule 40 (atomic -> IDENTIFIER .)
    LT              reduce using rule 40 (atomic -> IDENTIFIER .)
    GT              reduce using rule 40 (atomic -> IDENTIFIER .)
    LE              reduce using rule 40 (atomic -> IDENTIFIER .)
    GE              reduce using rule 40 (atomic -> IDENTIFIER .)
    AND             reduce using rule 40 (atomic -> IDENTIFIER .)
    OR              reduce using rule 40 (atomic -> IDENTIFIER .)
    TIMES           reduce using rule 40 (atomic -> IDENTIFIER .)
    DIVIDE          reduce using rule 40 (atomic -> IDENTIFIER .)
    MOD             reduce using rule 40 (atomic -> IDENTIFIER .)
    SEMICOLON       reduce using rule 40 (atomic -> IDENTIFIER .)
    PLUS            reduce using rule 40 (atomic -> IDENTIFIER .)
    MINUS           reduce using rule 40 (atomic -> IDENTIFIER .)
    RPAREN          reduce using rule 40 (atomic -> IDENTIFIER .)


state 32

    (41) atomic -> NUMBER .

    EQ              reduce using rule 41 (atomic -> NUMBER .)
    NE              reduce using rule 41 (atomic -> NUMBER .)
    LT              reduce using rule 41 (atomic -> NUMBER .)
    GT              reduce using rule 41 (atomic -> NUMBER .)
    LE              reduce using rule 41 (atomic -> NUMBER .)
    GE              reduce using rule 41 (atomic -> NUMBER .)
    AND             reduce using rule 41 (atomic -> NUMBER .)
    OR              reduce using rule 41 (atomic -> NUMBER .)
    TIMES           reduce using rule 41 (atomic -> NUMBER .)
    DIVIDE          reduce using rule 41 (atomic -> NUMBER .)
    MOD             reduce using rule 41 (atomic -> NUMBER .)
    SEMICOLON       reduce using rule 41 (atomic -> NUMBER .)
    PLUS            reduce using rule 41 (atomic -> NUMBER .)
    MINUS           reduce using rule 41 (atomic -> NUMBER .)
    RPAREN          reduce using rule 41 (atomic -> NUMBER .)


state 33

    (42) atomic -> LPAREN . expression RPAREN
    (20) expression -> . term
    (21) expression -> . expression PLUS term
    (22) expression -> . expression MINUS term
    (23) term -> . factor
    (24) term -> . term TIMES factor
    (25) term -> . term DIVIDE factor
    (26) term -> . term MOD factor
    (27) factor -> . primary
    (28) factor -> . NOT primary
    (29) factor -> . MINUS primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    NOT             shift and go to state 28
    MINUS           shift and go to state 25
    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 58
    term                           shift and go to state 24
    factor                         shift and go to state 26
    primary                        shift and go to state 27
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 34

    (10) var_declaration -> VAR IDENTIFIER ASSIGN . expression SEMICOLON
    (20) expression -> . term
    (21) expression -> . expression PLUS term
    (22) expression -> . expression MINUS term
    (23) term -> . factor
    (24) term -> . term TIMES factor
    (25) term -> . term DIVIDE factor
    (26) term -> . term MOD factor
    (27) factor -> . primary
    (28) factor -> . NOT primary
    (29) factor -> . MINUS primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    NOT             shift and go to state 28
    MINUS           shift and go to state 25
    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 59
    term                           shift and go to state 24
    factor                         shift and go to state 26
    primary                        shift and go to state 27
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 35

    (11) var_declaration -> VAR IDENTIFIER COLON_EQ . expression SEMICOLON
    (20) expression -> . term
    (21) expression -> . expression PLUS term
    (22) expression -> . expression MINUS term
    (23) term -> . factor
    (24) term -> . term TIMES factor
    (25) term -> . term DIVIDE factor
    (26) term -> . term MOD factor
    (27) factor -> . primary
    (28) factor -> . NOT primary
    (29) factor -> . MINUS primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    NOT             shift and go to state 28
    MINUS           shift and go to state 25
    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 60
    term                           shift and go to state 24
    factor                         shift and go to state 26
    primary                        shift and go to state 27
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 36

    (12) assignment -> IDENTIFIER ASSIGN expression . SEMICOLON
    (21) expression -> expression . PLUS term
    (22) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 61
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 37

    (13) assignment -> IDENTIFIER COLON_EQ expression . SEMICOLON
    (21) expression -> expression . PLUS term
    (22) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 62
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 38

    (14) while_loop -> WHILE LPAREN expression . RPAREN LBRACE statements RBRACE
    (21) expression -> expression . PLUS term
    (22) expression -> expression . MINUS term

    RPAREN          shift and go to state 63
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 39

    (15) for_loop -> FOR LPAREN var_declaration . expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (20) expression -> . term
    (21) expression -> . expression PLUS term
    (22) expression -> . expression MINUS term
    (23) term -> . factor
    (24) term -> . term TIMES factor
    (25) term -> . term DIVIDE factor
    (26) term -> . term MOD factor
    (27) factor -> . primary
    (28) factor -> . NOT primary
    (29) factor -> . MINUS primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    NOT             shift and go to state 28
    MINUS           shift and go to state 25
    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 64
    term                           shift and go to state 24
    factor                         shift and go to state 26
    primary                        shift and go to state 27
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 40

    (16) for_loop -> FOR LPAREN assignment . expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (20) expression -> . term
    (21) expression -> . expression PLUS term
    (22) expression -> . expression MINUS term
    (23) term -> . factor
    (24) term -> . term TIMES factor
    (25) term -> . term DIVIDE factor
    (26) term -> . term MOD factor
    (27) factor -> . primary
    (28) factor -> . NOT primary
    (29) factor -> . MINUS primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    NOT             shift and go to state 28
    MINUS           shift and go to state 25
    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    expression                     shift and go to state 65
    term                           shift and go to state 24
    factor                         shift and go to state 26
    primary                        shift and go to state 27
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 41

    (17) if_statement -> IF LPAREN expression . RPAREN LBRACE statements RBRACE
    (18) if_statement -> IF LPAREN expression . RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (21) expression -> expression . PLUS term
    (22) expression -> expression . MINUS term

    RPAREN          shift and go to state 66
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 42

    (19) assert_statement -> ASSERT expression SEMICOLON .

    VAR             reduce using rule 19 (assert_statement -> ASSERT expression SEMICOLON .)
    IDENTIFIER      reduce using rule 19 (assert_statement -> ASSERT expression SEMICOLON .)
    WHILE           reduce using rule 19 (assert_statement -> ASSERT expression SEMICOLON .)
    FOR             reduce using rule 19 (assert_statement -> ASSERT expression SEMICOLON .)
    IF              reduce using rule 19 (assert_statement -> ASSERT expression SEMICOLON .)
    ASSERT          reduce using rule 19 (assert_statement -> ASSERT expression SEMICOLON .)
    $end            reduce using rule 19 (assert_statement -> ASSERT expression SEMICOLON .)
    RBRACE          reduce using rule 19 (assert_statement -> ASSERT expression SEMICOLON .)


state 43

    (21) expression -> expression PLUS . term
    (23) term -> . factor
    (24) term -> . term TIMES factor
    (25) term -> . term DIVIDE factor
    (26) term -> . term MOD factor
    (27) factor -> . primary
    (28) factor -> . NOT primary
    (29) factor -> . MINUS primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    NOT             shift and go to state 28
    MINUS           shift and go to state 25
    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    term                           shift and go to state 67
    factor                         shift and go to state 26
    primary                        shift and go to state 27
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 44

    (22) expression -> expression MINUS . term
    (23) term -> . factor
    (24) term -> . term TIMES factor
    (25) term -> . term DIVIDE factor
    (26) term -> . term MOD factor
    (27) factor -> . primary
    (28) factor -> . NOT primary
    (29) factor -> . MINUS primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    NOT             shift and go to state 28
    MINUS           shift and go to state 25
    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    term                           shift and go to state 68
    factor                         shift and go to state 26
    primary                        shift and go to state 27
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 45

    (24) term -> term TIMES . factor
    (27) factor -> . primary
    (28) factor -> . NOT primary
    (29) factor -> . MINUS primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    NOT             shift and go to state 28
    MINUS           shift and go to state 25
    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    factor                         shift and go to state 69
    primary                        shift and go to state 27
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 46

    (25) term -> term DIVIDE . factor
    (27) factor -> . primary
    (28) factor -> . NOT primary
    (29) factor -> . MINUS primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    NOT             shift and go to state 28
    MINUS           shift and go to state 25
    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    factor                         shift and go to state 70
    primary                        shift and go to state 27
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 47

    (26) term -> term MOD . factor
    (27) factor -> . primary
    (28) factor -> . NOT primary
    (29) factor -> . MINUS primary
    (39) primary -> . comparison
    (30) comparison -> . comparison EQ atomic
    (31) comparison -> . comparison NE atomic
    (32) comparison -> . comparison LT atomic
    (33) comparison -> . comparison GT atomic
    (34) comparison -> . comparison LE atomic
    (35) comparison -> . comparison GE atomic
    (36) comparison -> . comparison AND atomic
    (37) comparison -> . comparison OR atomic
    (38) comparison -> . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    NOT             shift and go to state 28
    MINUS           shift and go to state 25
    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    factor                         shift and go to state 71
    primary                        shift and go to state 27
    comparison                     shift and go to state 29
    atomic                         shift and go to state 30

state 48

    (29) factor -> MINUS primary .

    TIMES           reduce using rule 29 (factor -> MINUS primary .)
    DIVIDE          reduce using rule 29 (factor -> MINUS primary .)
    MOD             reduce using rule 29 (factor -> MINUS primary .)
    SEMICOLON       reduce using rule 29 (factor -> MINUS primary .)
    PLUS            reduce using rule 29 (factor -> MINUS primary .)
    MINUS           reduce using rule 29 (factor -> MINUS primary .)
    RPAREN          reduce using rule 29 (factor -> MINUS primary .)


state 49

    (28) factor -> NOT primary .

    TIMES           reduce using rule 28 (factor -> NOT primary .)
    DIVIDE          reduce using rule 28 (factor -> NOT primary .)
    MOD             reduce using rule 28 (factor -> NOT primary .)
    SEMICOLON       reduce using rule 28 (factor -> NOT primary .)
    PLUS            reduce using rule 28 (factor -> NOT primary .)
    MINUS           reduce using rule 28 (factor -> NOT primary .)
    RPAREN          reduce using rule 28 (factor -> NOT primary .)


state 50

    (30) comparison -> comparison EQ . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    atomic                         shift and go to state 72

state 51

    (31) comparison -> comparison NE . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    atomic                         shift and go to state 73

state 52

    (32) comparison -> comparison LT . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    atomic                         shift and go to state 74

state 53

    (33) comparison -> comparison GT . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    atomic                         shift and go to state 75

state 54

    (34) comparison -> comparison LE . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    atomic                         shift and go to state 76

state 55

    (35) comparison -> comparison GE . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    atomic                         shift and go to state 77

state 56

    (36) comparison -> comparison AND . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    atomic                         shift and go to state 78

state 57

    (37) comparison -> comparison OR . atomic
    (40) atomic -> . IDENTIFIER
    (41) atomic -> . NUMBER
    (42) atomic -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 31
    NUMBER          shift and go to state 32
    LPAREN          shift and go to state 33

    atomic                         shift and go to state 79

state 58

    (42) atomic -> LPAREN expression . RPAREN
    (21) expression -> expression . PLUS term
    (22) expression -> expression . MINUS term

    RPAREN          shift and go to state 80
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 59

    (10) var_declaration -> VAR IDENTIFIER ASSIGN expression . SEMICOLON
    (21) expression -> expression . PLUS term
    (22) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 81
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 60

    (11) var_declaration -> VAR IDENTIFIER COLON_EQ expression . SEMICOLON
    (21) expression -> expression . PLUS term
    (22) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 82
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 61

    (12) assignment -> IDENTIFIER ASSIGN expression SEMICOLON .

    VAR             reduce using rule 12 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 12 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 12 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 12 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 12 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    ASSERT          reduce using rule 12 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 12 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 12 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 12 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 12 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 12 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 12 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    RPAREN          reduce using rule 12 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)


state 62

    (13) assignment -> IDENTIFIER COLON_EQ expression SEMICOLON .

    VAR             reduce using rule 13 (assignment -> IDENTIFIER COLON_EQ expression SEMICOLON .)
    IDENTIFIER      reduce using rule 13 (assignment -> IDENTIFIER COLON_EQ expression SEMICOLON .)
    WHILE           reduce using rule 13 (assignment -> IDENTIFIER COLON_EQ expression SEMICOLON .)
    FOR             reduce using rule 13 (assignment -> IDENTIFIER COLON_EQ expression SEMICOLON .)
    IF              reduce using rule 13 (assignment -> IDENTIFIER COLON_EQ expression SEMICOLON .)
    ASSERT          reduce using rule 13 (assignment -> IDENTIFIER COLON_EQ expression SEMICOLON .)
    $end            reduce using rule 13 (assignment -> IDENTIFIER COLON_EQ expression SEMICOLON .)
    RBRACE          reduce using rule 13 (assignment -> IDENTIFIER COLON_EQ expression SEMICOLON .)
    NOT             reduce using rule 13 (assignment -> IDENTIFIER COLON_EQ expression SEMICOLON .)
    MINUS           reduce using rule 13 (assignment -> IDENTIFIER COLON_EQ expression SEMICOLON .)
    NUMBER          reduce using rule 13 (assignment -> IDENTIFIER COLON_EQ expression SEMICOLON .)
    LPAREN          reduce using rule 13 (assignment -> IDENTIFIER COLON_EQ expression SEMICOLON .)
    RPAREN          reduce using rule 13 (assignment -> IDENTIFIER COLON_EQ expression SEMICOLON .)


state 63

    (14) while_loop -> WHILE LPAREN expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 83


state 64

    (15) for_loop -> FOR LPAREN var_declaration expression . SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (21) expression -> expression . PLUS term
    (22) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 84
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 65

    (16) for_loop -> FOR LPAREN assignment expression . SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (21) expression -> expression . PLUS term
    (22) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 85
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 66

    (17) if_statement -> IF LPAREN expression RPAREN . LBRACE statements RBRACE
    (18) if_statement -> IF LPAREN expression RPAREN . LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    LBRACE          shift and go to state 86


state 67

    (21) expression -> expression PLUS term .
    (24) term -> term . TIMES factor
    (25) term -> term . DIVIDE factor
    (26) term -> term . MOD factor

    SEMICOLON       reduce using rule 21 (expression -> expression PLUS term .)
    PLUS            reduce using rule 21 (expression -> expression PLUS term .)
    MINUS           reduce using rule 21 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 21 (expression -> expression PLUS term .)
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47


state 68

    (22) expression -> expression MINUS term .
    (24) term -> term . TIMES factor
    (25) term -> term . DIVIDE factor
    (26) term -> term . MOD factor

    SEMICOLON       reduce using rule 22 (expression -> expression MINUS term .)
    PLUS            reduce using rule 22 (expression -> expression MINUS term .)
    MINUS           reduce using rule 22 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 22 (expression -> expression MINUS term .)
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47


state 69

    (24) term -> term TIMES factor .

    TIMES           reduce using rule 24 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 24 (term -> term TIMES factor .)
    MOD             reduce using rule 24 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 24 (term -> term TIMES factor .)
    PLUS            reduce using rule 24 (term -> term TIMES factor .)
    MINUS           reduce using rule 24 (term -> term TIMES factor .)
    RPAREN          reduce using rule 24 (term -> term TIMES factor .)


state 70

    (25) term -> term DIVIDE factor .

    TIMES           reduce using rule 25 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 25 (term -> term DIVIDE factor .)
    MOD             reduce using rule 25 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 25 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 25 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 25 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 25 (term -> term DIVIDE factor .)


state 71

    (26) term -> term MOD factor .

    TIMES           reduce using rule 26 (term -> term MOD factor .)
    DIVIDE          reduce using rule 26 (term -> term MOD factor .)
    MOD             reduce using rule 26 (term -> term MOD factor .)
    SEMICOLON       reduce using rule 26 (term -> term MOD factor .)
    PLUS            reduce using rule 26 (term -> term MOD factor .)
    MINUS           reduce using rule 26 (term -> term MOD factor .)
    RPAREN          reduce using rule 26 (term -> term MOD factor .)


state 72

    (30) comparison -> comparison EQ atomic .

    EQ              reduce using rule 30 (comparison -> comparison EQ atomic .)
    NE              reduce using rule 30 (comparison -> comparison EQ atomic .)
    LT              reduce using rule 30 (comparison -> comparison EQ atomic .)
    GT              reduce using rule 30 (comparison -> comparison EQ atomic .)
    LE              reduce using rule 30 (comparison -> comparison EQ atomic .)
    GE              reduce using rule 30 (comparison -> comparison EQ atomic .)
    AND             reduce using rule 30 (comparison -> comparison EQ atomic .)
    OR              reduce using rule 30 (comparison -> comparison EQ atomic .)
    TIMES           reduce using rule 30 (comparison -> comparison EQ atomic .)
    DIVIDE          reduce using rule 30 (comparison -> comparison EQ atomic .)
    MOD             reduce using rule 30 (comparison -> comparison EQ atomic .)
    SEMICOLON       reduce using rule 30 (comparison -> comparison EQ atomic .)
    PLUS            reduce using rule 30 (comparison -> comparison EQ atomic .)
    MINUS           reduce using rule 30 (comparison -> comparison EQ atomic .)
    RPAREN          reduce using rule 30 (comparison -> comparison EQ atomic .)


state 73

    (31) comparison -> comparison NE atomic .

    EQ              reduce using rule 31 (comparison -> comparison NE atomic .)
    NE              reduce using rule 31 (comparison -> comparison NE atomic .)
    LT              reduce using rule 31 (comparison -> comparison NE atomic .)
    GT              reduce using rule 31 (comparison -> comparison NE atomic .)
    LE              reduce using rule 31 (comparison -> comparison NE atomic .)
    GE              reduce using rule 31 (comparison -> comparison NE atomic .)
    AND             reduce using rule 31 (comparison -> comparison NE atomic .)
    OR              reduce using rule 31 (comparison -> comparison NE atomic .)
    TIMES           reduce using rule 31 (comparison -> comparison NE atomic .)
    DIVIDE          reduce using rule 31 (comparison -> comparison NE atomic .)
    MOD             reduce using rule 31 (comparison -> comparison NE atomic .)
    SEMICOLON       reduce using rule 31 (comparison -> comparison NE atomic .)
    PLUS            reduce using rule 31 (comparison -> comparison NE atomic .)
    MINUS           reduce using rule 31 (comparison -> comparison NE atomic .)
    RPAREN          reduce using rule 31 (comparison -> comparison NE atomic .)


state 74

    (32) comparison -> comparison LT atomic .

    EQ              reduce using rule 32 (comparison -> comparison LT atomic .)
    NE              reduce using rule 32 (comparison -> comparison LT atomic .)
    LT              reduce using rule 32 (comparison -> comparison LT atomic .)
    GT              reduce using rule 32 (comparison -> comparison LT atomic .)
    LE              reduce using rule 32 (comparison -> comparison LT atomic .)
    GE              reduce using rule 32 (comparison -> comparison LT atomic .)
    AND             reduce using rule 32 (comparison -> comparison LT atomic .)
    OR              reduce using rule 32 (comparison -> comparison LT atomic .)
    TIMES           reduce using rule 32 (comparison -> comparison LT atomic .)
    DIVIDE          reduce using rule 32 (comparison -> comparison LT atomic .)
    MOD             reduce using rule 32 (comparison -> comparison LT atomic .)
    SEMICOLON       reduce using rule 32 (comparison -> comparison LT atomic .)
    PLUS            reduce using rule 32 (comparison -> comparison LT atomic .)
    MINUS           reduce using rule 32 (comparison -> comparison LT atomic .)
    RPAREN          reduce using rule 32 (comparison -> comparison LT atomic .)


state 75

    (33) comparison -> comparison GT atomic .

    EQ              reduce using rule 33 (comparison -> comparison GT atomic .)
    NE              reduce using rule 33 (comparison -> comparison GT atomic .)
    LT              reduce using rule 33 (comparison -> comparison GT atomic .)
    GT              reduce using rule 33 (comparison -> comparison GT atomic .)
    LE              reduce using rule 33 (comparison -> comparison GT atomic .)
    GE              reduce using rule 33 (comparison -> comparison GT atomic .)
    AND             reduce using rule 33 (comparison -> comparison GT atomic .)
    OR              reduce using rule 33 (comparison -> comparison GT atomic .)
    TIMES           reduce using rule 33 (comparison -> comparison GT atomic .)
    DIVIDE          reduce using rule 33 (comparison -> comparison GT atomic .)
    MOD             reduce using rule 33 (comparison -> comparison GT atomic .)
    SEMICOLON       reduce using rule 33 (comparison -> comparison GT atomic .)
    PLUS            reduce using rule 33 (comparison -> comparison GT atomic .)
    MINUS           reduce using rule 33 (comparison -> comparison GT atomic .)
    RPAREN          reduce using rule 33 (comparison -> comparison GT atomic .)


state 76

    (34) comparison -> comparison LE atomic .

    EQ              reduce using rule 34 (comparison -> comparison LE atomic .)
    NE              reduce using rule 34 (comparison -> comparison LE atomic .)
    LT              reduce using rule 34 (comparison -> comparison LE atomic .)
    GT              reduce using rule 34 (comparison -> comparison LE atomic .)
    LE              reduce using rule 34 (comparison -> comparison LE atomic .)
    GE              reduce using rule 34 (comparison -> comparison LE atomic .)
    AND             reduce using rule 34 (comparison -> comparison LE atomic .)
    OR              reduce using rule 34 (comparison -> comparison LE atomic .)
    TIMES           reduce using rule 34 (comparison -> comparison LE atomic .)
    DIVIDE          reduce using rule 34 (comparison -> comparison LE atomic .)
    MOD             reduce using rule 34 (comparison -> comparison LE atomic .)
    SEMICOLON       reduce using rule 34 (comparison -> comparison LE atomic .)
    PLUS            reduce using rule 34 (comparison -> comparison LE atomic .)
    MINUS           reduce using rule 34 (comparison -> comparison LE atomic .)
    RPAREN          reduce using rule 34 (comparison -> comparison LE atomic .)


state 77

    (35) comparison -> comparison GE atomic .

    EQ              reduce using rule 35 (comparison -> comparison GE atomic .)
    NE              reduce using rule 35 (comparison -> comparison GE atomic .)
    LT              reduce using rule 35 (comparison -> comparison GE atomic .)
    GT              reduce using rule 35 (comparison -> comparison GE atomic .)
    LE              reduce using rule 35 (comparison -> comparison GE atomic .)
    GE              reduce using rule 35 (comparison -> comparison GE atomic .)
    AND             reduce using rule 35 (comparison -> comparison GE atomic .)
    OR              reduce using rule 35 (comparison -> comparison GE atomic .)
    TIMES           reduce using rule 35 (comparison -> comparison GE atomic .)
    DIVIDE          reduce using rule 35 (comparison -> comparison GE atomic .)
    MOD             reduce using rule 35 (comparison -> comparison GE atomic .)
    SEMICOLON       reduce using rule 35 (comparison -> comparison GE atomic .)
    PLUS            reduce using rule 35 (comparison -> comparison GE atomic .)
    MINUS           reduce using rule 35 (comparison -> comparison GE atomic .)
    RPAREN          reduce using rule 35 (comparison -> comparison GE atomic .)


state 78

    (36) comparison -> comparison AND atomic .

    EQ              reduce using rule 36 (comparison -> comparison AND atomic .)
    NE              reduce using rule 36 (comparison -> comparison AND atomic .)
    LT              reduce using rule 36 (comparison -> comparison AND atomic .)
    GT              reduce using rule 36 (comparison -> comparison AND atomic .)
    LE              reduce using rule 36 (comparison -> comparison AND atomic .)
    GE              reduce using rule 36 (comparison -> comparison AND atomic .)
    AND             reduce using rule 36 (comparison -> comparison AND atomic .)
    OR              reduce using rule 36 (comparison -> comparison AND atomic .)
    TIMES           reduce using rule 36 (comparison -> comparison AND atomic .)
    DIVIDE          reduce using rule 36 (comparison -> comparison AND atomic .)
    MOD             reduce using rule 36 (comparison -> comparison AND atomic .)
    SEMICOLON       reduce using rule 36 (comparison -> comparison AND atomic .)
    PLUS            reduce using rule 36 (comparison -> comparison AND atomic .)
    MINUS           reduce using rule 36 (comparison -> comparison AND atomic .)
    RPAREN          reduce using rule 36 (comparison -> comparison AND atomic .)


state 79

    (37) comparison -> comparison OR atomic .

    EQ              reduce using rule 37 (comparison -> comparison OR atomic .)
    NE              reduce using rule 37 (comparison -> comparison OR atomic .)
    LT              reduce using rule 37 (comparison -> comparison OR atomic .)
    GT              reduce using rule 37 (comparison -> comparison OR atomic .)
    LE              reduce using rule 37 (comparison -> comparison OR atomic .)
    GE              reduce using rule 37 (comparison -> comparison OR atomic .)
    AND             reduce using rule 37 (comparison -> comparison OR atomic .)
    OR              reduce using rule 37 (comparison -> comparison OR atomic .)
    TIMES           reduce using rule 37 (comparison -> comparison OR atomic .)
    DIVIDE          reduce using rule 37 (comparison -> comparison OR atomic .)
    MOD             reduce using rule 37 (comparison -> comparison OR atomic .)
    SEMICOLON       reduce using rule 37 (comparison -> comparison OR atomic .)
    PLUS            reduce using rule 37 (comparison -> comparison OR atomic .)
    MINUS           reduce using rule 37 (comparison -> comparison OR atomic .)
    RPAREN          reduce using rule 37 (comparison -> comparison OR atomic .)


state 80

    (42) atomic -> LPAREN expression RPAREN .

    EQ              reduce using rule 42 (atomic -> LPAREN expression RPAREN .)
    NE              reduce using rule 42 (atomic -> LPAREN expression RPAREN .)
    LT              reduce using rule 42 (atomic -> LPAREN expression RPAREN .)
    GT              reduce using rule 42 (atomic -> LPAREN expression RPAREN .)
    LE              reduce using rule 42 (atomic -> LPAREN expression RPAREN .)
    GE              reduce using rule 42 (atomic -> LPAREN expression RPAREN .)
    AND             reduce using rule 42 (atomic -> LPAREN expression RPAREN .)
    OR              reduce using rule 42 (atomic -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 42 (atomic -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 42 (atomic -> LPAREN expression RPAREN .)
    MOD             reduce using rule 42 (atomic -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 42 (atomic -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 42 (atomic -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 42 (atomic -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 42 (atomic -> LPAREN expression RPAREN .)


state 81

    (10) var_declaration -> VAR IDENTIFIER ASSIGN expression SEMICOLON .

    VAR             reduce using rule 10 (var_declaration -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 10 (var_declaration -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 10 (var_declaration -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 10 (var_declaration -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 10 (var_declaration -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    ASSERT          reduce using rule 10 (var_declaration -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 10 (var_declaration -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 10 (var_declaration -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 10 (var_declaration -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 10 (var_declaration -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 10 (var_declaration -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 10 (var_declaration -> VAR IDENTIFIER ASSIGN expression SEMICOLON .)


state 82

    (11) var_declaration -> VAR IDENTIFIER COLON_EQ expression SEMICOLON .

    VAR             reduce using rule 11 (var_declaration -> VAR IDENTIFIER COLON_EQ expression SEMICOLON .)
    IDENTIFIER      reduce using rule 11 (var_declaration -> VAR IDENTIFIER COLON_EQ expression SEMICOLON .)
    WHILE           reduce using rule 11 (var_declaration -> VAR IDENTIFIER COLON_EQ expression SEMICOLON .)
    FOR             reduce using rule 11 (var_declaration -> VAR IDENTIFIER COLON_EQ expression SEMICOLON .)
    IF              reduce using rule 11 (var_declaration -> VAR IDENTIFIER COLON_EQ expression SEMICOLON .)
    ASSERT          reduce using rule 11 (var_declaration -> VAR IDENTIFIER COLON_EQ expression SEMICOLON .)
    $end            reduce using rule 11 (var_declaration -> VAR IDENTIFIER COLON_EQ expression SEMICOLON .)
    RBRACE          reduce using rule 11 (var_declaration -> VAR IDENTIFIER COLON_EQ expression SEMICOLON .)
    NOT             reduce using rule 11 (var_declaration -> VAR IDENTIFIER COLON_EQ expression SEMICOLON .)
    MINUS           reduce using rule 11 (var_declaration -> VAR IDENTIFIER COLON_EQ expression SEMICOLON .)
    NUMBER          reduce using rule 11 (var_declaration -> VAR IDENTIFIER COLON_EQ expression SEMICOLON .)
    LPAREN          reduce using rule 11 (var_declaration -> VAR IDENTIFIER COLON_EQ expression SEMICOLON .)


state 83

    (14) while_loop -> WHILE LPAREN expression RPAREN LBRACE . statements RBRACE
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . var_declaration
    (5) statement -> . assignment
    (6) statement -> . while_loop
    (7) statement -> . for_loop
    (8) statement -> . if_statement
    (9) statement -> . assert_statement
    (10) var_declaration -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (11) var_declaration -> . VAR IDENTIFIER COLON_EQ expression SEMICOLON
    (12) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) assignment -> . IDENTIFIER COLON_EQ expression SEMICOLON
    (14) while_loop -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (15) for_loop -> . FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (16) for_loop -> . FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (18) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (19) assert_statement -> . ASSERT expression SEMICOLON

    VAR             shift and go to state 10
    IDENTIFIER      shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    ASSERT          shift and go to state 15

    statements                     shift and go to state 87
    statement                      shift and go to state 3
    var_declaration                shift and go to state 4
    assignment                     shift and go to state 5
    while_loop                     shift and go to state 6
    for_loop                       shift and go to state 7
    if_statement                   shift and go to state 8
    assert_statement               shift and go to state 9

state 84

    (15) for_loop -> FOR LPAREN var_declaration expression SEMICOLON . assignment RPAREN LBRACE statements RBRACE
    (12) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) assignment -> . IDENTIFIER COLON_EQ expression SEMICOLON

    IDENTIFIER      shift and go to state 11

    assignment                     shift and go to state 88

state 85

    (16) for_loop -> FOR LPAREN assignment expression SEMICOLON . assignment RPAREN LBRACE statements RBRACE
    (12) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) assignment -> . IDENTIFIER COLON_EQ expression SEMICOLON

    IDENTIFIER      shift and go to state 11

    assignment                     shift and go to state 89

state 86

    (17) if_statement -> IF LPAREN expression RPAREN LBRACE . statements RBRACE
    (18) if_statement -> IF LPAREN expression RPAREN LBRACE . statements RBRACE ELSE LBRACE statements RBRACE
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . var_declaration
    (5) statement -> . assignment
    (6) statement -> . while_loop
    (7) statement -> . for_loop
    (8) statement -> . if_statement
    (9) statement -> . assert_statement
    (10) var_declaration -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (11) var_declaration -> . VAR IDENTIFIER COLON_EQ expression SEMICOLON
    (12) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) assignment -> . IDENTIFIER COLON_EQ expression SEMICOLON
    (14) while_loop -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (15) for_loop -> . FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (16) for_loop -> . FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (18) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (19) assert_statement -> . ASSERT expression SEMICOLON

    VAR             shift and go to state 10
    IDENTIFIER      shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    ASSERT          shift and go to state 15

    statements                     shift and go to state 90
    statement                      shift and go to state 3
    var_declaration                shift and go to state 4
    assignment                     shift and go to state 5
    while_loop                     shift and go to state 6
    for_loop                       shift and go to state 7
    if_statement                   shift and go to state 8
    assert_statement               shift and go to state 9

state 87

    (14) while_loop -> WHILE LPAREN expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 91


state 88

    (15) for_loop -> FOR LPAREN var_declaration expression SEMICOLON assignment . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 92


state 89

    (16) for_loop -> FOR LPAREN assignment expression SEMICOLON assignment . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 93


state 90

    (17) if_statement -> IF LPAREN expression RPAREN LBRACE statements . RBRACE
    (18) if_statement -> IF LPAREN expression RPAREN LBRACE statements . RBRACE ELSE LBRACE statements RBRACE

    RBRACE          shift and go to state 94


state 91

    (14) while_loop -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .

    VAR             reduce using rule 14 (while_loop -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 14 (while_loop -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 14 (while_loop -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 14 (while_loop -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 14 (while_loop -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    ASSERT          reduce using rule 14 (while_loop -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 14 (while_loop -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 14 (while_loop -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)


state 92

    (15) for_loop -> FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 95


state 93

    (16) for_loop -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 96


state 94

    (17) if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .
    (18) if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE . ELSE LBRACE statements RBRACE

    VAR             reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    ASSERT          reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 17 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    ELSE            shift and go to state 97


state 95

    (15) for_loop -> FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE . statements RBRACE
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . var_declaration
    (5) statement -> . assignment
    (6) statement -> . while_loop
    (7) statement -> . for_loop
    (8) statement -> . if_statement
    (9) statement -> . assert_statement
    (10) var_declaration -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (11) var_declaration -> . VAR IDENTIFIER COLON_EQ expression SEMICOLON
    (12) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) assignment -> . IDENTIFIER COLON_EQ expression SEMICOLON
    (14) while_loop -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (15) for_loop -> . FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (16) for_loop -> . FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (18) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (19) assert_statement -> . ASSERT expression SEMICOLON

    VAR             shift and go to state 10
    IDENTIFIER      shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    ASSERT          shift and go to state 15

    var_declaration                shift and go to state 4
    assignment                     shift and go to state 5
    statements                     shift and go to state 98
    statement                      shift and go to state 3
    while_loop                     shift and go to state 6
    for_loop                       shift and go to state 7
    if_statement                   shift and go to state 8
    assert_statement               shift and go to state 9

state 96

    (16) for_loop -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE . statements RBRACE
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . var_declaration
    (5) statement -> . assignment
    (6) statement -> . while_loop
    (7) statement -> . for_loop
    (8) statement -> . if_statement
    (9) statement -> . assert_statement
    (10) var_declaration -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (11) var_declaration -> . VAR IDENTIFIER COLON_EQ expression SEMICOLON
    (12) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) assignment -> . IDENTIFIER COLON_EQ expression SEMICOLON
    (14) while_loop -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (15) for_loop -> . FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (16) for_loop -> . FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (18) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (19) assert_statement -> . ASSERT expression SEMICOLON

    VAR             shift and go to state 10
    IDENTIFIER      shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    ASSERT          shift and go to state 15

    assignment                     shift and go to state 5
    statements                     shift and go to state 99
    statement                      shift and go to state 3
    var_declaration                shift and go to state 4
    while_loop                     shift and go to state 6
    for_loop                       shift and go to state 7
    if_statement                   shift and go to state 8
    assert_statement               shift and go to state 9

state 97

    (18) if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE . LBRACE statements RBRACE

    LBRACE          shift and go to state 100


state 98

    (15) for_loop -> FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 101


state 99

    (16) for_loop -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 102


state 100

    (18) if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE . statements RBRACE
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . var_declaration
    (5) statement -> . assignment
    (6) statement -> . while_loop
    (7) statement -> . for_loop
    (8) statement -> . if_statement
    (9) statement -> . assert_statement
    (10) var_declaration -> . VAR IDENTIFIER ASSIGN expression SEMICOLON
    (11) var_declaration -> . VAR IDENTIFIER COLON_EQ expression SEMICOLON
    (12) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (13) assignment -> . IDENTIFIER COLON_EQ expression SEMICOLON
    (14) while_loop -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (15) for_loop -> . FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (16) for_loop -> . FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE
    (17) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (18) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (19) assert_statement -> . ASSERT expression SEMICOLON

    VAR             shift and go to state 10
    IDENTIFIER      shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    ASSERT          shift and go to state 15

    statements                     shift and go to state 103
    statement                      shift and go to state 3
    var_declaration                shift and go to state 4
    assignment                     shift and go to state 5
    while_loop                     shift and go to state 6
    for_loop                       shift and go to state 7
    if_statement                   shift and go to state 8
    assert_statement               shift and go to state 9

state 101

    (15) for_loop -> FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .

    VAR             reduce using rule 15 (for_loop -> FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 15 (for_loop -> FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 15 (for_loop -> FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 15 (for_loop -> FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 15 (for_loop -> FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)
    ASSERT          reduce using rule 15 (for_loop -> FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 15 (for_loop -> FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 15 (for_loop -> FOR LPAREN var_declaration expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)


state 102

    (16) for_loop -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .

    VAR             reduce using rule 16 (for_loop -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 16 (for_loop -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 16 (for_loop -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 16 (for_loop -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 16 (for_loop -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)
    ASSERT          reduce using rule 16 (for_loop -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 16 (for_loop -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 16 (for_loop -> FOR LPAREN assignment expression SEMICOLON assignment RPAREN LBRACE statements RBRACE .)


state 103

    (18) if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements . RBRACE

    RBRACE          shift and go to state 104


state 104

    (18) if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .

    VAR             reduce using rule 18 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 18 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    WHILE           reduce using rule 18 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    FOR             reduce using rule 18 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    IF              reduce using rule 18 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    ASSERT          reduce using rule 18 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    $end            reduce using rule 18 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    RBRACE          reduce using rule 18 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)

